
import os
import sys

sys.path.append('../script')
import imgdep

# this import assumes that the super-module has mtextools in the right place,
# this might need to be changed in the future.
sys.path.append('../../mtextools')
import mtexrules

def relitavise(paths):
    #print('Paths===')
    for ipath in range(len(paths)):
        if isinstance(paths[ipath], list):
            continue
        paths[ipath] = '#' + paths[ipath]

def replace_ext(srcpath, ext):
    base = os.path.splitext(srcpath)[0]
    return base + '.' + ext

def gen_imgdep_paths(srctex):
    srctexfull = File(srctex).srcnode().abspath
    srctexdep = mtexrules.Texfile(srctexfull)

    teximgpaths = []
    teximgpaths.extend(srctexdep.imagefilenames)
    teximgpaths.extend(srctexdep.importfilenames)

    for subfile in srctexdep.subfilenames:
        subfilefull = File('#' + subfile).srcnode().abspath
        subfiletexdep = mtexrules.Texfile(subfilefull)
        teximgpaths.extend(subfiletexdep.imagefilenames)
        teximgpaths.extend(subfiletexdep.importfilenames)

    gen_img_paths = []
    #import pdb; pdb.set_trace()
    for teximg in teximgpaths:
        genimg = teximg.replace('\\imgdir/gen', imgdep._get_dest_dir())
        gen_img_paths.append(genimg)
    return gen_img_paths

Import('*')

AddOption('--tex',
          dest='tex',
          type='string',
          nargs=1,
          action='store')

if len(src) == 0:
    raise Exception('no source files specified')

relitavise(src)
src.append('references.bib')
src.append('common.tex')
src.append('symbols.tex')

src.append(Glob('../tex/tikz/*.tex'))
src.append(Glob('../img/*'))
src.append(Glob('../img/gen/*'))

textarget = GetOption('tex')

if textarget is not None:
    target = '#' + replace_ext(textarget, 'pdf')
    srctex = replace_ext(target, 'tex')
else:
    srctex = src[0]
    target = replace_ext(srctex, 'pdf')

# get the image dependencies for the source tex file
imgdep_paths = gen_imgdep_paths(srctex)

# generate the images if necessary
for imgdep_path in imgdep_paths:
    imgdep_name = os.path.split(imgdep_path)[-1]
    if imgdep_path.find(imgdep._get_dest_dir()) != -1:
        print('imgdep:building:\t{}'.format(imgdep_name))
        imgdep.img(imgdep_name)
    else:
        print('imgdep:skipping:\t{}'.format(imgdep_name))

print('### building: ' + target)
print('### from tex: ' + srctex)
#print('### src: ' + str(src))

srctex = srctex.lstrip('#')
env = Environment()
cmd = env.Command(target, src, 'latexmk -pdf ' + srctex)

for imgarg in imgdep.get_img_deps():
    for imgsrc in imgarg.get_src_paths():
        Depends(cmd, imgsrc)

Clean(cmd, Glob('#/*.pdf'))
Clean(cmd, Glob('#/*.bbl'))
Clean(cmd, Glob('#/*.blg'))
Clean(cmd, Glob('#/*.fdb_latexmk'))
Clean(cmd, Glob('#/*.fls'))
Clean(cmd, Glob('#/*.log'))
Clean(cmd, Glob('#/*.glg'))
Clean(cmd, Glob('#/*.glo'))
Clean(cmd, Glob('#/*.gls'))
Clean(cmd, Glob('#/*.ist'))
Clean(cmd, Glob('#/*.xdy'))
Clean(cmd, Glob('#/*.aux'))
Clean(cmd, Glob('#/*.toc'))
Clean(cmd, Glob('#/*.out'))
Clean(cmd, Glob('#/*.idx'))
Clean(cmd, Glob('#/*.ilg'))
Clean(cmd, Glob('#/*.ind'))



import os
import sys

sys.path.append('../script')
import imgdep

# this import assumes that the super-module has mtextools in the right place,
# this might need to be changed in the future.
sys.path.append('../../mtextools')
import mtexrules

def relitavise(paths):
    #print('Paths===')
    for ipath in range(len(paths)):
        if isinstance(paths[ipath], list):
            continue
        paths[ipath] = '#' + paths[ipath]

def replace_ext(srcpath, ext):
    base = os.path.splitext(srcpath)[0]
    return base + '.' + ext

def gen_imgdep_paths(tex):
    if os.path.splitext(str(tex))[1] == '.tex':
        srctexfull = File(tex).srcnode().abspath
        srctexdep = mtexrules.Texfile(srctexfull, process_inputs=False)

        # get dependent image files from tex
        teximgpaths = []
        teximgpaths.extend(srctexdep.imagefilenames)

        # then look for other tex files it depends on
        texdeppaths = []

        def append_tex_deps(tex_imports):
            for importdep in tex_imports:
                importext = os.path.splitext(importdep)[1]
                if importext == '.pdf_tex':
                    #pdf_tex files are actually images in this build system
                    teximgpaths.append(importdep)
                elif importext == '.tex':
                    texdeppaths.append(importdep)
                else:
                    raise Exception('Unexpected import extension')

        append_tex_deps(srctexdep.importfilenames)
        append_tex_deps(srctexdep.inputfilenames)

        for subfile in srctexdep.subfilenames:
            texdeppaths.append(subfile)

        gen_img_paths = []
        for teximg in teximgpaths:
            genimg = teximg.replace('\\imgdir/gen', imgdep._get_dest_dir())
            gen_img_paths.append(genimg)

        texdeps = []
        for texdep in texdeppaths:
            texdepdest = texdep.replace('\\tikzdir', imgdep._get_tikz_dir())
            texdeps.append(texdepdest)

        return texdeps, gen_img_paths

    return []

Import('*')

AddOption('--tex',
          dest='tex',
          type='string',
          nargs=1,
          action='store')

if len(src) == 0:
    raise Exception('no source files specified')

relitavise(src)
src.append('references.bib')
src.append('common.tex')
src.append('symbols.tex')

src.append(Glob('../../img/*'))

textarget = GetOption('tex')

if textarget is not None:
    target = '#' + replace_ext(textarget, 'pdf')
    srctex = replace_ext(target, 'tex')
else:
    srctex = src[0]
    target = replace_ext(srctex, 'pdf')

# create a new build environment
env = Environment()

def tex_builder(target, source, env):
    srctex_clean = srctex.lstrip('#')
    return os.system('latexmk -pdf ' + srctex_clean)
tex_bld = Builder(action=tex_builder)
env.Append(BUILDERS={'TexBuild': tex_bld})

texbuild = env.TexBuild(target, srctex)
Default(texbuild)

# create a builder for building the image files
def img_builder(target, source, env):
    imgdep_name = os.path.split(str(target[0]))[-1]
    imgdep.img(imgdep_name)
    return None
img_bld = Builder(action=img_builder)
env.Append(BUILDERS={'ImgBuild': img_bld})

tex_to_process = [srctex]
tex_processed = []
imgdep_paths = []

while len(tex_to_process) > 0:
    texfile = tex_to_process[0]
    tex_deps, img_deps = gen_imgdep_paths(texfile)
    tex_processed.append(texfile)
    imgdep_paths.extend(img_deps)
    for texdep in tex_deps:
        if texdep not in tex_processed:
            tex_to_process.append(texdep)
    tex_to_process.pop(0)

# generate the images if necessary
for imgdep_path in imgdep_paths:
    # only need to build images which contain the gen dir in the path
    if imgdep_path.find(imgdep._get_dest_dir()) != -1:
        imgdep_name = os.path.split(imgdep_path)[-1]

        sources, targets = imgdep.get_img_source_targets(imgdep_name)
        imgbuild = env.ImgBuild(targets, sources)
        Depends(texbuild, imgbuild)

for texdep in tex_processed:
    Depends(texbuild, texdep)

Clean(texbuild, Glob('#/*.bbl'))
Clean(texbuild, Glob('#/*.blg'))
Clean(texbuild, Glob('#/*.fdb_latexmk'))
Clean(texbuild, Glob('#/*.fls'))
Clean(texbuild, Glob('#/*.log'))
Clean(texbuild, Glob('#/*.glg'))
Clean(texbuild, Glob('#/*.glo'))
Clean(texbuild, Glob('#/*.gls'))
Clean(texbuild, Glob('#/*.ist'))
Clean(texbuild, Glob('#/*.xdy'))
Clean(texbuild, Glob('#/*.aux'))
Clean(texbuild, Glob('#/*.toc'))
Clean(texbuild, Glob('#/*.out'))
Clean(texbuild, Glob('#/*.idx'))
Clean(texbuild, Glob('#/*.ilg'))
Clean(texbuild, Glob('#/*.ind'))
Clean(texbuild, Glob('#/*.nav'))
Clean(texbuild, Glob('#/*.snm'))

